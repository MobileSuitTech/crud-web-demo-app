summary to run the server:

clone my code into the current directory
make sure package.json is good
do sudo npm install 
do sudo service mongod start
do node server.js

summary to build and run the dockers:

>build mean container:
docker build -t todo-frontend .
>run mongodb container:
docker run -p 27017:27017 -it --name backend-mongo mongo
OR the one that defaults to port 27017:
docker run -it --name backend-mongo mongo
//docker run --name backend-mongo -d mongo
>check that the mongo container runs:
docker ps
>run mean container:
docker run -it --link backend-mongo:db_1 -p 8888:3000 todo-frontend
//docker run --link backend-mongo:db_1 -p 8888:3000 -d todo-frontend
>check that the frontend container runs:
docker ps
>stop everything:
>run both containers with docker-compose:


the problem is not with the mongodb container, it is with the frontend 
container 
if nothing else works, just google it......

first run our usual setup and see if we can nmap to it in public...

maybe try to stop the mongo service and THEN to start the containers....

our usual server can be seen publicly, now let's try the containers...
also can go check how we used to do it with the other docker project...

we notice that the frontend docker does not want to port forward public, 
but we can see it in localhost.... this is odd

let's try to figure out what the backend-mongo:db1 name stands for, is it 
somewhere in the github for that project? clone it in a directory then 
search through it all NO NOT THE ISSUE

maybe it's actually a problem with the frontend itself....
maybe it's just simply not running the server right?


try mongoose 3.6.2????
NO THAT DOES NOT WORK
BUT 4.1.1 DOES LOL
YEAH BUT FUCK THAT FAILED WITH THE ACTUAL CONTAINERS....
let's now go back to where we were before

change the version in package .json (save the last one)
(the last one is "mongoose": "^5.2.14",  )
do npm install
run the server and see if it works, if it works,
build the docker container again
test it with the database....
if it doesn't work, revert the package.json file,
do npm install again


maybe get a newer version of the node docker image (node:latest ?)

i just installed the latest version of mongodb but that was actually 3.1.6 and 
when i checked the version before it was 6.4.1
then npm -v mongodb still shows 6.4.1 for some reason

new possibilities:
NOPE 1) in the mongo container run command, add the ports 27017:27017
2) from the first containers tut, chang a line in database.js
3) try docker-compose and see if that works instead of manual builds


summary to build and run the dockers:

>build mean container:
docker build -t todo-frontend .
>run mongodb container:
docker run -p 27017:27017 -it --name backend-mongo mongo
OR the one that defaults to port 27017:
docker run -it --name backend-mongo mongo
//docker run --name backend-mongo -d mongo
>check that the mongo container runs:
docker ps
>run mean container:
docker run -it --link backend-mongo:db_1 -p 8888:3000 todo-frontend
//docker run --link backend-mongo:db_1 -p 8888:3000 -d todo-frontend
>check that the frontend container runs:
docker ps
>stop everything:
>run both containers with docker-compose:

never forget that the problem is ONLY on the frontend side of things!!!!!

maybe form the database.js file !!!! where apparently it links to the docker 
IP of the database!!!!!!!!
before we mess with the file, let's try docker-compose....


>so changing the ip to the internal docker networking didnt work but maybe 
cause we shouldnt have put the port into it?
it is nice to notice that mongo was telling us that node connected to it, 
after we check the database.js for the proper ip, let's look into that if 
it failed

>but before, let's try something else which is:
use the version of the docker launch command that has the port set for 
the listening port of the container (first of course do a good docker system prune....)
NOPE THAT DID NOT WORK

still does not work what th efuck do we dooooooooO!!!!!!
go back to the fact that we definitely cannot see the container port, we 
cannot reach it at all that's fucked up, why is that!!!!!

maybe run the node container as fucking root?
NOPE THAT DOESN'T WORK
maybe look up a tutorial on how to make a node webserver in docker?
maybe the answer lies in docker-compose?
also go on irc to the docker channel... as a last resort....

try to listen to all interfaces in node, and let docker do the port binding?

OMFG it works!!!!
where it listened to was in fact:
http://172.17.0.3:8888/


now, go to the readme and write down the steps to make this happen

docker build -t todo-frontend .
docker run --name backend-mongo -d mongo
docker run --link backend-mongo:db_1 --name frontend-mean -d todo-frontend