what to do next for integration:
how to integrate, what steps do we take next?
>first look at both index.html files and see what we can put together
DONE
>then find out a way to make one item not being stored, but being fetched 
from Mongodb
>HOWOWOWOW????
>first add 2 fields and make them just strings (we'll do date later)
DONE
>when doing Add Item now it must send it to the database
>have open both controllers in my text editor and see how we can incorporate from the nice looking one to the ToDo one...
...damn here we have a problem because both controllers are not the same 
.. we may have to use the way that the ToDo app does in its controller ...but that means that we would have to change the angular version of the 
...nice looking site maybe breaking it?...
>let's try it by changing the angular script that we import in the .html
>okay just found a bug where in the new app we can enter a new item 
that has a blank value legally instead of it being illegal...
>so maybe the solution is to use the code from nice app and incorporate 
mongo access from older app into it, let's see if that works
>does that mean we also need to start adding mongo now?
maybe it's time to bring in the html from nice into ToDo? as well as the 
controller?
only way to find out is to do that very thing but see if it will still work because we are using a new angular in the nice one and an old one 
in ToDo so the mongo access may not work, how to find out?
just try it maybe
but try whaht?
maybe we can start by moving the new html into the old correct directory...
>now put the controller!!!
OKAY EVERYTHING WORKS PRETTY NICELY NOW, LET'S JUST MAKE MONGO WORK!!!!
so ToDo3 is the folder that works right now.....
>>>Next have both controllers side by side and get to work.....
problem, when i add core.js to html it breaks it, maybe try and 
add ListController to it???
so adding core.js is bad but maybe we can modify the declaration 
up top of ListController.js the same way that it is declared in main.js.... and that will work?
Try one thing and immidiately reverse it if it don't work....
change the top declaration of ListController to look like main.js....
before we make the big change, figure out where mainController is referenced...
so no, the manipulation did not change, apparently the new app doesn't like to have a core.js because it messes with things?
How about we remove it from html and instead include only the files themselves? how about we check server.js first to be sure....
YES SERVER.JS MAKES NO MENTION OF IT....
OK now big problem everything is broken and cant get back to what it was..
now to get out of this shit:
>reread above to see what I changed to break this...
>compare the original html and controller file to the ones currently in the directory for the new app...
>maybe i messed up the variable at the top of the controller file
>in any case i can redo the entire same manipulation and maybe get it working
so from clicking the tabs i know what the controller is probably working...
WOW SO IT TURNED OUT THAT I BROKE EVERYTHING BY SIMPLY PUTTING 
THE IMPORT JAVASCRIPT LIBRARY OUT OF ORDER
okay so we can try again now, and start from

will adding core.js break things now??
NO
does putting core.js after the other ones break things now??
could it be the reason that the api gets a 304 now vs full success
YES THAT IS CORRECT IT BREAKS IT, AND THEREFORE,
 IF WE REMOVE IT COMPLETELY, ARE GOING TO ACTUALLY GET 
 A GOOD API HIT FROM THAT POINT FORWARD???
 fuck no the api is still gone.....

 >okay now for the time to experiment on the apis.....
> okay so now we need to look at index and controller side by side
a good test would be to try and add a data point to the db by looking 
at whether or not what i do updates the db list on the api page
>first add $http, Todos and see if we broke anything....
>also what is formData and how do we use it????


>the goal here being to MAKE THE MONGO DATA RETRIEVAL WORK....


