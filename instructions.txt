what to do next for integration:
how to integrate, what steps do we take next?
>first look at both index.html files and see what we can put together
DONE
>then find out a way to make one item not being stored, but being fetched 
from Mongodb
>HOWOWOWOW????
>first add 2 fields and make them just strings (we'll do date later)
DONE
>when doing Add Item now it must send it to the database
>have open both controllers in my text editor and see how we can incorporate from the nice looking one to the ToDo one...
...damn here we have a problem because both controllers are not the same 
.. we may have to use the way that the ToDo app does in its controller ...but that means that we would have to change the angular version of the 
...nice looking site maybe breaking it?...
>let's try it by changing the angular script that we import in the .html
>okay just found a bug where in the new app we can enter a new item 
that has a blank value legally instead of it being illegal...
>so maybe the solution is to use the code from nice app and incorporate 
mongo access from older app into it, let's see if that works
>does that mean we also need to start adding mongo now?
maybe it's time to bring in the html from nice into ToDo? as well as the 
controller?
only way to find out is to do that very thing but see if it will still work because we are using a new angular in the nice one and an old one 
in ToDo so the mongo access may not work, how to find out?
just try it maybe
but try whaht?
maybe we can start by moving the new html into the old correct directory...
>now put the controller!!!
OKAY EVERYTHING WORKS PRETTY NICELY NOW, LET'S JUST MAKE MONGO WORK!!!!
so ToDo3 is the folder that works right now.....
>>>Next have both controllers side by side and get to work.....
problem, when i add core.js to html it breaks it, maybe try and 
add ListController to it???
so adding core.js is bad but maybe we can modify the declaration 
up top of ListController.js the same way that it is declared in main.js.... and that will work?
Try one thing and immidiately reverse it if it don't work....
change the top declaration of ListController to look like main.js....
before we make the big change, figure out where mainController is referenced...
so no, the manipulation did not change, apparently the new app doesn't like to have a core.js because it messes with things?
How about we remove it from html and instead include only the files themselves? how about we check server.js first to be sure....
YES SERVER.JS MAKES NO MENTION OF IT....
OK now big problem everything is broken and cant get back to what it was..
now to get out of this shit:
>reread above to see what I changed to break this...
>compare the original html and controller file to the ones currently in the directory for the new app...
>maybe i messed up the variable at the top of the controller file
>in any case i can redo the entire same manipulation and maybe get it working
so from clicking the tabs i know what the controller is probably working...
WOW SO IT TURNED OUT THAT I BROKE EVERYTHING BY SIMPLY PUTTING 
THE IMPORT JAVASCRIPT LIBRARY OUT OF ORDER
okay so we can try again now, and start from

will adding core.js break things now??
NO
does putting core.js after the other ones break things now??
could it be the reason that the api gets a 304 now vs full success
YES THAT IS CORRECT IT BREAKS IT, AND THEREFORE,
 IF WE REMOVE IT COMPLETELY, ARE GOING TO ACTUALLY GET 
 A GOOD API HIT FROM THAT POINT FORWARD???
 fuck no the api is still gone.....

 >okay now for the time to experiment on the apis.....
> okay so now we need to look at index and controller side by side
a good test would be to try and add a data point to the db by looking 
at whether or not what i do updates the db list on the api page
>first add $http, Todos and see if we broke anything....
NO THAT BROKE IT!!! OMFG
>so tu understand what just happened I'll look at some other code's controller and see how they do it there...
GOOD NEWS, THE NEW CONTROLLER NOW LOOKS LIKE THE OLD ONE....
>but first let's look at another code's controller...
DONE, NOTHING HELPED...
>now try to do the same manipulation we did before that broke the app with the weird core.js stuff..
OKAY THAT'S DONE BUT STILL DIDN'T ADD $HTTP, tODOS... BUT THAT SHOULD
BE FINE CONSIDERING WE ARE NOT USING THEM IN THE CODE.......
so first test without them, then with them
THAT WORKS WITHOUT THE PARAMS, NOW LET'S TRY WITH....
ok http works, lets try Todos now....!!!!!!
YES IT WORKS!!!
>NOW WE can finally try to include network code into this.....!!!!!!
now we get an error while trying to push a string to Mongodb because 
it's send function doesn't recognize the string , it only recognizes "form"
>>>so now maybe we do the final conversion from new controller to old controller, with changes in the html as well....
omfg yes i was able to create and send to the api!!!!
>problem is I don't know why!!!!
>we're also gonna need to add a route for "complete" which should be an http UPDATE route
>>the only place we can relate to the "text" field that is part of the model of every data object is in the html file, there we can see it is associated with formData(not sure what that does), but it has to be in one of the fields, instead of detail and stat, now we have detail in there but we shouldn't
for some reason we can't seem to add a freaking field to the data model!!!!!
we also found a reference to the model fields in the routes file too hahahahahhaa!!!!!
>>>how dows the autocomplete know that the req's body has a text field, but not a date field?
>>>okay we need to make the switch to formData now...
maybe the problem is that I REALLY NEED TO INITIALIZE A DATE BEFORE I TRY TO USE IT???? LET'S TRY TO DO THAT IN THE ABOVE FILE AND CALL .Date
yeah okay before i continue any of this i really need to fix the $scope.items thing into $scope.formData instead....

todo:
>the goal here being to MAKE THE MONGO DATA RETRIEVAL WORK....
DONE!!!!
>$scope.formData in the controller, initialize it to zero...
>html: bring in formData...
>controller: populate the functions with the REST actions

>>>make sure the date works
so why can't we get the proper date it's ridiculous!!!
could it be that it is not getting a value when it looks for it? because it is gone at that point? doubtful since the other fields are working...
what else?
>maybe my version of Angular is too old, man that would be sick if it was but it could break things maybe so I would have to fix that, although Angular is only responsible for stuff that happens in the browser with the html page so it wouldn't be so bad....
NO THE VERSION OF ANGULAR IS ENOUGH FOR WHAT I WANT TO DO
>before we go this route though we will see if we can make the date better, such as maybe store it as a number in milliseconds, but that would be okay in Javascript, but how in html?
>>>how do we make a test case to test the sorting of the array?
ok get the new angular from the example website, do it now...
index.backup-latest2.html is the very latest save before we start breaking stuff
line 106 of index.html
<div class = "list_item" ng-repeat="todo in todos | orderBy:'-text'">
OMFGOMFG I GOT THE TEXT FILTER TO WORK!!!!!!!!

there is something interesting that we just noticed, is that in the 3rd tab, the list is filtered but we are not sure due to which field it is filtered, so maybe let's find out ?? it's so fucking hard... or new? yeah new lol...
>wow lol with new try it's actually broken completely at the 3rd tab....


why does clicking on tab 2 change the ordering????
but not on tab 3?
okay we have also noticed that when we change tabs we see that the titles also change positions, which would indicate that maybe this could be a CSS problem?
what if i add a filter by done flag to the first? it should not reverse the order, will it?
no it did not change, so this is exactly what we thought, but why?
>always sort each column by date
>add an update action to completeItem and make a route for it with UPDATE
IT IS DOOOOOOOOOONE!!!!!!
I know!!!! instead of updating, we can create a new one like the old with an added True and then delete the other one!!!! ahahhaahahhahhahahha
no that doesn't work we can only send an id....
10 more minutes of intense searching and then I'll read what I had in the browser earlier about how to update a field
>add a field for status: Complete/Active line 64
>also line 76 and others filters: {stat:'Active'}
i put in the script for the new version of angular and it broke everything
now trying to put it in <head> instead and will see if that fixes it but probably not since the browser debug console was saying that it couldn't recognize a function, so nothing related to the html
(instead of putting it right outside <body>)
NOPE DOESN'T WORK
OKAY GOT IT....

>add the date field on html
>make the "imminent" filter of dates....


>set the tags for CSS so that the 3rd column doesn't get a weird thing where it says status, it is biased towards the right for some reason because 
blocks or wrappers have problems, 2 and 3 are the same but different than the first one
>add the description field on html
>check the todo vs todo._id for delete in html for all three tabs...











